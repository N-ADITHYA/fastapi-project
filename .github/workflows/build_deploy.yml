name: Build and Deploy code

on: [push, pull_request]

jobs:
  job1:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      TIME_AT_EXPIRATION: ${{secrets.TIME_AT_EXPIRATION}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repository
        uses: actions/checkout@v4
      - name: Install python version 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: installing all dependencies
        run: pip install -r requirements.txt
      - name: Run test with pytest
        run: |
          pip install pytest
          pytest

      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DATABASE_PASSWORD}}

      - name: set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile

          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/fastapi :latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}